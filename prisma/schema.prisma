// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id   String  @id @default(cuid())
  name String?

  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]

  email String @unique

  FavTour favoritesTours[] @relation(name: "userFav")

  bookings Booking[] @relation(name: "userBook")

  Reviews   Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model favoritesTours {
  TourId String
  tour   Tour   @relation(name: "favTour", fields: [TourId], references: [id])

  userEmail String
  user      User   @relation(name: "userFav", fields: [userEmail], references: [email])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([TourId, userEmail])
  @@index([TourId, userEmail])
}

model Options {
  id     String @id @default(cuid())
  tourId String
  tour   Tour   @relation(fields: [tourId], name: "tourOption", references: [id])

  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id        String  @default(cuid())
  name      String?
  email     String
  message   String?
  UserEmail String?
  phone     String?
  user      User?   @relation(name: "userBook", fields: [UserEmail], references: [email])

  TourId String
  tour   Tour   @relation(name: "tourBook", fields: [TourId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([email, TourId])
  @@index([email, TourId])
}

model Tour {
  id          String @id @default(cuid())
  title       String
  description String
  address     String
  city        String
  country     String
  price       Float?
  image       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  booking Booking[]        @relation(name: "tourBook")
  FavTour favoritesTours[] @relation(name: "favTour")

  options Options[] @relation(name: "tourOption")

  Reviews Review[]

  @@unique(fields: [address, city, country])
}

model Review {
  id      String @id @default(cuid())
  message String

  userEmail String
  rating    Float
  user      User   @relation(fields: [userEmail], references: [email])

  tourId String
  Tour   Tour   @relation(fields: [tourId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
