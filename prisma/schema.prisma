// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model review {
  productId String   @id @default(cuid())
  username  String
  text      String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Tour   Tour   @relation(fields: [tourId], references: [id])
  tourId String

  userId String
  User   User   @relation(fields: [userId], references: [id])
}

model Tour {
  id           String     @id @default(cuid())
  title        String
  city         String
  image        String
  adress       String
  price        Float
  distance     Float
  rating       Float
  maxGroupSize Int
  featured     Boolean
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  reviews      review[]
  UserTour     UserTour[]
}

model UserTour {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Tour      Tour     @relation(fields: [tourId], references: [id])
  tourId    String
  User      User     @relation(fields: [userId], references: [id])
  userId    String
  datetime  DateTime @default(now())

  @@unique([tourId, userId])
}

model User {
  id        String     @id @default(cuid())
  username  String
  email     String     @unique
  role      String     @default("user")
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  UserTour  UserTour[]
  review    review[]

  name String?

  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
